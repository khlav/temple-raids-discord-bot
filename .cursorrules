# Cursor Rules for Temple Raids Discord Bot

## PR Generation Rules

### 1. Always Return Clickable Links
When generating or referencing PRs, always provide clickable links in the format:
- `[PR #123: Title](https://github.com/khlav/temple-raids-discord-bot/pull/123)`
- Use full GitHub URLs for maximum compatibility

### 2. Branch Management Rules
**CRITICAL**: All development work MUST be done on non-main branches. Never commit directly to `main`.

#### Pre-flight Checks
- **Verify working tree**: Run `git status` to confirm there are changes to commit
- **Check current branch**: If on `main`, create new branch; if on feature branch, use existing branch
- **Validate changes**: Ensure all changes are ready and tested

#### Branch Creation Rules
- **Always create feature branches** for any changes, no matter how small
- **Never work directly on main** - main is for stable, merged code only
- **Use descriptive branch names** following the naming convention below

### 3. "Ship It" Command Behavior
**CRITICAL**: When the user says "ship it", you MUST follow these exact steps in order. Do not use your own "ship it" logic - follow these rules precisely:

#### Step-by-Step Process
1. **Create branch** (if on main): Use format `{type}/{kebab-case-description}` where type is:
   - `feature/` - New user-facing functionality
   - `fix/` - Bug fixes or corrections  
   - `chore/` - Maintenance, dependencies, tooling
   - `refactor/` - Code improvements without behavior changes
   - `hotfix/` - Critical production fixes
   - `dev/` - Developer-only changes (docs, config, CI, developer workflow)

2. **Commit changes**: 
   - Stage all files: `git add .`
   - Commit with conventional format: `{type}({scope}): {description}`
   - Examples: `feat(bot): add slash command`, `fix(handler): resolve message parsing issue`

3. **Push branch**: `git push origin {branch-name}`

4. **Create PR**:
   - Use `gh pr create` with title and description
   - Title format: `{Action} {what was changed}`
   - Description: **Always use** `.github/pull_request_template.md` if it exists
   - Fill out all required sections in the template
   - If no template exists, use standard format with key changes and technical context

5. **Apply user-facing label**:
   - **Always apply** for `feature/` and `fix/` branches (unless only config files changed)
   - **Never apply** for `chore/`, `dev/`, `refactor/` branches
   - **Config-only check**: If changes are ONLY in `.github/`, `.cursorrules`, `*.config.*`, `*.yml`, `*.yaml`, `README.md`, `package.json`, `pnpm-lock.yaml` â†’ skip label
   - Use: `gh pr create --label "user-facing"` when applying

6. **Return clickable link**: Always provide the clickable PR link in format `[PR #123: Title](https://github.com/khlav/temple-raids-discord-bot/pull/123)`

#### Error Handling
- If any step fails, stop and report the error
- Do not proceed with subsequent steps if previous steps failed
- Provide clear error messages for debugging

#### Important Notes
- Only ship changes that are currently ready - do not assume future changes
- The `user-facing` label controls Discord notifications for merged PRs
- Label can be manually adjusted after PR creation if auto-detection is incorrect

### 4. PR Description Formatting
When creating PR descriptions, ensure proper escaping for code blocks and special characters:

**For inline code**: Use single backticks with proper escaping
- Example: `\`code\`` becomes `code` in the description

**For code blocks**: Use triple backticks with language specification
- Example: 
  ```
  \`\`\`typescript
  const example = "properly escaped";
  \`\`\`
  ```

**For special characters**: Escape as needed for GitHub markdown
- `*` becomes `\*` when not used for emphasis
- `_` becomes `\_` when not used for emphasis
- `#` becomes `\#` when not used for headers

**Zone acronyms and technical terms**: Always wrap in backticks
- Example: `MC`, `BWL`, `AQ40`, `Naxx` for zone acronyms
- Example: `warriors OR mages` for search syntax

### 4. Branch Naming Convention
- `feature/description` for new features
- `fix/description` for bug fixes
- `chore/description` for maintenance tasks
- `refactor/description` for code refactoring
- Use kebab-case for multi-word descriptions

### 5. Commit Message Format
- Use conventional commits format: `type(scope): description`
- Examples:
  - `feat(bot): add slash command support`
  - `fix(handler): resolve message parsing issue`
  - `chore(deps): update dependencies`

### 6. PR Title Format
- Start with action verb: "Add", "Fix", "Update", "Refactor"
- Be descriptive but concise
- Include scope if relevant: "Add slash command support"

### 7. PR Description Standards
- **Follow the PR template** - Always use `.github/pull_request_template.md` if it exists
- **Be crisp and concise** - avoid overly wordy descriptions
- **Focus on key changes** - what was added, fixed, or improved
- **Use bullet points** for easy scanning
- **Include technical context** only when relevant
- **Template compliance** - Fill out all required sections in the template
- **Custom sections** - Add any additional context in appropriate template sections

## Discord Bot Specific Rules

### Bot Architecture Standards
- Follow Discord.js v14+ patterns consistently
- Use slash commands and interactions over message-based commands
- Implement proper command cooldowns and rate limiting
- Use ephemeral responses for sensitive operations
- Follow Discord's API best practices and rate limits

### Error Handling & Logging
- Implement comprehensive error handling for all Discord API calls
- Use structured logging with appropriate log levels
- Handle Discord API errors gracefully (rate limits, permissions, etc.)
- Log user actions for debugging and audit purposes
- Never expose sensitive information in error messages to users

### Permission & Security
- Always verify user permissions before executing commands
- Implement role-based access control for admin commands
- Validate user input to prevent injection attacks
- Use environment variables for sensitive configuration
- Never hardcode tokens or API keys

### Command Structure
- Use consistent command naming conventions (kebab-case)
- Implement proper command descriptions and help text
- Use Discord's built-in option types for command parameters
- Follow Discord's command character limits and formatting rules

### Database Integration
- Use the shared database schema from the web app when applicable
- Implement proper connection pooling for database operations
- Handle database errors gracefully
- Use transactions for multi-step operations

### Performance & Reliability
- Implement proper caching for frequently accessed data
- Use background tasks for long-running operations
- Implement proper cleanup for resources
- Handle bot disconnections and reconnections gracefully

### Code Organization
- Keep handlers in separate files by functionality
- Use services for business logic separation
- Implement proper dependency injection
- Follow the existing project structure patterns

### Testing & Development
- Write unit tests for business logic
- Test Discord interactions in development environment
- Use proper environment separation (dev/staging/prod)
- Implement proper debugging tools and commands

### Discord-Specific Patterns
- Use embeds for rich message formatting
- Implement proper pagination for large data sets
- Use buttons and select menus for interactive responses
- Follow Discord's content policy and community guidelines
- Implement proper mention handling and sanitization

### Integration with Web App
- Use shared types and interfaces when possible
- Implement proper API communication with the web app
- Handle web app API errors gracefully
- Use consistent data models across both applications

### Deployment & Monitoring
- Use proper environment configuration
- Implement health checks and monitoring
- Use proper logging for production debugging
- Handle graceful shutdowns and restarts
